class Solution {
    public String[] findWords(String[] words) {
        Map<Character, Integer> letters = new HashMap<>();
        letters.put('q', 1);
        letters.put('w', 1);
        letters.put('e', 1);
        letters.put('r', 1);
        letters.put('t', 1);
        letters.put('y', 1);
        letters.put('u', 1);
        letters.put('i', 1);
        letters.put('o', 1);
        letters.put('p', 1);
        letters.put('a', 2);
        letters.put('s', 2);
        letters.put('d', 2);
        letters.put('f', 2);
        letters.put('g', 2);
        letters.put('h', 2);
        letters.put('j', 2);
        letters.put('k', 2);
        letters.put('l', 2);
        letters.put('z', 3);
        letters.put('x', 3);
        letters.put('c', 3);
        letters.put('v', 3);
        letters.put('b', 3);
        letters.put('n', 3);
        letters.put('m', 3);
        
        List<String> result = new ArrayList<>();
        int line = 0;
        
 OUTER: for(String word : words){
            for(int i=0, n=word.length(); i<n; i++){
                String str = Character.toString(word.charAt(i)).toLowerCase();
                char c = str.charAt(0);
                if(i == 0)
                    line = letters.get(c);
                if(line != letters.get(c))
                   continue OUTER;
                if(i + 1 == n)
                    result.add(word);           
            }
        }
        
        return result.toArray(new String[result.size()]);
    }
}