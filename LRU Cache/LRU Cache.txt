class LRUCache {
    private int capacity;
    private Map<Integer,Integer> Cache;
    private ArrayDeque<Integer> deque;
    
    public LRUCache(int capacity) {
        Cache = new HashMap<>(capacity);
        deque = new ArrayDeque<>();
        this.capacity = capacity;   
    }
    
    public int get(int key) {
        if(Cache.get(key)==null)
            return -1;
        
        if(deque.contains(key))
            deque.remove(key);
        
        deque.push(key);
        
        return Cache.get(key);
    }
    
    public void put(int key, int value) {
        if(Cache.size() == capacity && !Cache.containsKey(key))
            Cache.remove(deque.removeLast());
                 
        Cache.put(key,value);
        
        if(deque.contains(key))
            deque.remove(key);
        
        deque.push(key);
    }
}

/**
 * Your LRUCache object will be instantiated and called as such:
 * LRUCache obj = new LRUCache(capacity);
 * int param_1 = obj.get(key);
 * obj.put(key,value);
 */