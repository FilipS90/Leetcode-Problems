class Solution {
    public int[][] merge(int[][] intervals) {
        int mergesCount = 0;

        Arrays.sort(intervals, (a, b) -> Integer.compare(a[0], b[0]));

        for(int i = 1; i < intervals.length; i++) {
            if(intervals[i-1][1] >= intervals[i][1] || intervals[i-1][0] >= intervals[i][0]){
                int min = Math.min(intervals[i-1][0], intervals[i][0]);
                int max = Math.max(intervals[i-1][1], intervals[i][1]);
                intervals[i][0] = min;
                intervals[i][1] = max;
                intervals[i-1][1] = 0;
                mergesCount++;
            } else if(intervals[i-1][1] >= intervals[i][0]) {
                intervals[i][0] = intervals[i-1][0];
                intervals[i-1][1] = 0;
                mergesCount++;
            }
        }

        int idx = 0;
        int[][] result = new int[intervals.length - mergesCount][2];
        for(int i = 0; i < intervals.length; i++) {
            if(intervals[i][1] == 0) {
                continue;
            }

            result[idx][0] = intervals[i][0];
            result[idx][1] = intervals[i][1];
            idx++;
        }

        return result;
    }
}